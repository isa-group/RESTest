package es.us.isa.restest.examples;

import es.us.isa.restest.generators.ConstraintBasedTestCaseGenerator;
import es.us.isa.restest.runners.RESTestLoader;
import es.us.isa.restest.testcases.TestCase;
import es.us.isa.restest.util.RESTestException;
import es.us.isa.restest.writers.restassured.RESTAssuredWriter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.Collection;

import static es.us.isa.restest.util.FileManager.createDir;

/**
 * This example shows how to generate a set of test cases using the Constraint-Based test case generator and write them to a file using the RESTAssured writer.
 * Test cases are generated by randomly selecting values for each input parameter making sure that inter-parameter dependencies are satisfied (or violated on purpose).
 * This is possible thanks to the use of a constraint solver (Choco) and IDL, a domain-specific language for specifying inter-parameter dependencies as a part of the OAS specification.
 * See the following post for more details: https://medium.com/isa-group/handling-inter-parameter-dependencies-in-rest-apis-with-idl4oas-e5489abac32f
 * See test cases for more examples.
 *
 * The resources for this example are located at src/main/resources/Examples/Ex3_CBTGeneration.
 */
public class Ex3_CBTGeneration {

    public static final String PROPERTY_FILE_PATH = "src/main/resources/Examples/Ex3_CBTGeneration/user_config.properties"; 		// Path to user properties file with configuration options

    private static final Logger logger = LogManager.getLogger(Ex3_CBTGeneration.class.getName());


    public static void main(String[] args) throws RESTestException {
        // Load properties
        RESTestLoader loader = new RESTestLoader(PROPERTY_FILE_PATH);

        // Create test case generator
        ConstraintBasedTestCaseGenerator generator = (ConstraintBasedTestCaseGenerator) loader.createGenerator();
        Collection<TestCase> testCases = generator.generate();

        // Create target directory for test cases if it does not exist
        createDir(loader.getTargetDirJava());

        // Write (RestAssured) test cases
        RESTAssuredWriter writer = (RESTAssuredWriter) loader.createWriter();
        writer.write(testCases);

        logger.info(testCases.size() + " test cases generated and written to " + loader.getTargetDirJava());

    }
}
